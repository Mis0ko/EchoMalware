#include "StdAfx.h"
#include <windows.h>
#include <winternl.h>
#include  <stdio.h>
#include <string.h>
#include <fstream>
#include <stdlib.h>
#include <ctime>
#include <iostream>
#include <string>
#include <vector>
#include <ctype.h>
using namespace std;
int loc_401DA7[]= {0x02,0x04,0xC0,0x00,0x45,0x85,0x60,0x3C,0x48,0x1A,0x71,0x03,0xFC,0x06,0xA0,0x8F,0x60,0xAC,0x80};
char loc_401AA8[] = {'H' ^42,'e' ^42,'l' ^42,'l' ^42,'o' ^42,' ' ^42,'W' ^42,'o' ^42,'r' ^42,'l' ^42,'d' ^42,'\x00' ^42};
char loc_401AD8[12] = { '\x6a', '\x0c', '\x68', '\x88', '\x30', '\xac', '\x6b', '\xe8', '\x99', '\xbd','\xf8', '\xff' };
char loc_401AC8[23] = { '\x49', '\x10', '\x76', '\x5d', '\x43', '\x44', '\x4e', '\x45','\x5d', '\x59', '\x76', '\x44','\x45','\x5e',
'\x4f','\x5a','\x4b','\x4e','\x04','\x4f','\x52','\x4f','\x2a' };
char loc_401AA6[] = { '\x8b', '\xff', '\x55', '\x8b', '\xec', '\x6a', '\x00','\xff', '\x75', '\x2c', '\xff', '\x75' };
int loc_401DD1[]= {0x02,0x04,0xC0,0x00,0x45,0x85,0x60,0x3C,0x48,0x1A,0x71,0x03,0xFC,0x06,0xA0,0x8F,0x60,0xAC,0x80};
char loc_401AD89[] = {'p'^42,'a'^42,'s'^42,'s'^42,'w'^42,'o'^42,'r'^42,'d'^42,'\x00'^42}; //fakePass
int loc_AABB = 0;
int loc_401AC87 = 0;

int loc_401AC89[] = {97, 26, 65, 69}; //cesarValue

void loc_406AD11 (int loc_406BD11 /*decalage*/, string& loc_406BA11 /*text*/) //cesar
{



    int loc_165F8A45 = 0;
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
    HANDLE loc_4019825E6 = GetCurrentProcess();
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
    BOOL loc_401895027 = IsDebuggerPresent();

    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
    CheckRemoteDebuggerPresent(loc_4019825E6, &loc_165F8A45);

    PEB *chouette;

    __asm{
        mov eax, fs:[0x30]
        mov chouette, eax
    }

    if (loc_401895027 || loc_165F8A45 || chouette->BeingDebugged) {
         __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
        exit(-1);
    }




	for (int i = 0, n = loc_406BA11.length(); i < n; i++)
	{
		if (islower(loc_406BA11[i]))
			loc_406BA11[i] = (((loc_406BA11[i] + loc_406BD11) - loc_401AC89[0]) % loc_401AC89[1]) + loc_401AC89[0];
		else if (isupper(loc_406BA11[i]))
			loc_406BA11[i]=(((loc_406BA11[i] + loc_406BD11) - loc_401AC89[2]) % loc_401AC89[1]) + loc_401AC89[2];
	}
}


string loc_401BA11 = "Vdc"; //dateAujourdhui

time_t loc_401BA81; //now
char * loc_401B581; //findDay

const int loc_701B581 = 1000000007; //mod
int loc_781B581 = 0; //count

int loc_721B581 = 66; //lavaleur
int kk=0;
int loc_7216581[] = {17,4,3,0,1,8,25,120,4,100, 53, 5}; //A
int loc_721D581[] = {51,2,3,4,5}; //D
char loc_72DD581[] = {'n'^51,'k'^52,' '^53,'h'^54,'d'^55, '\x00'^56}; //pass
string loc_72DDA81 = "hello"; //s1
string loc_720DA81 = ""; //passString
int loc_401AA7(){
	int glob_402B8=0;
	for(;kk<4; kk++){
		glob_402B8 += loc_7216581[kk];
	}
	return glob_402B8;
}

typedef int (*loc_720DA01)(char*, char*, int); //cc
typedef char* (*loc_7200A01)(time_t * loc_720D581 /*timer*/); //printff
typedef void* (*loc_7200001) (size_t loc_72000041 /*size*/); //strLen

loc_7200001 loc_72000001 = 0; //strleen
void loc_72000081(){ //printFuncAdress
	FILE *loc_786D8ABB; //fp
	loc_786D8ABB = fopen("../FunctionObfuscations.txt", "w");


    fprintf(loc_786D8ABB, "%p\n", printf);
    fprintf(loc_786D8ABB, "%p\n", clearerr);
    fprintf(loc_786D8ABB, "%p\n", fclose);
    fprintf(loc_786D8ABB, "%p\n", IsDebuggerPresent);
    fprintf(loc_786D8ABB, "%p\n", fdopen);
    fprintf(loc_786D8ABB, "%p\n", feof);
    fprintf(loc_786D8ABB, "%p\n", ferror);
    fprintf(loc_786D8ABB, "%p\n", ctime);
    fprintf(loc_786D8ABB, "%p\n", fflush);
    fprintf(loc_786D8ABB, "%p\n", fgetc);
    fprintf(loc_786D8ABB, "%p\n", fopen);
    fprintf(loc_786D8ABB, "%p\n", fprintf);
    fprintf(loc_786D8ABB, "%p\n", fscanf);
    fprintf(loc_786D8ABB, "%p\n", fseek);

    fprintf(loc_786D8ABB, "%p\n", perror);
    fprintf(loc_786D8ABB, "%p\n", printf);
    fprintf(loc_786D8ABB, "%p\n", putc);
    fprintf(loc_786D8ABB, "%p\n", putchar);
    fprintf(loc_786D8ABB, "%p\n", puts);
 

    fprintf(loc_786D8ABB, "%p\n", malloc);
    fprintf(loc_786D8ABB, "%p\n", calloc);
    fprintf(loc_786D8ABB, "%p\n", realloc);


    fprintf(loc_786D8ABB, "%p\n", atol);
    fprintf(loc_786D8ABB, "%p\n", atof);
    fprintf(loc_786D8ABB, "%p\n", strtod);
    fprintf(loc_786D8ABB, "%p\n", strtol);
    fprintf(loc_786D8ABB, "%p\n", rand);



    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
	fprintf(loc_786D8ABB, "printf : %p\n", printf);
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
	fprintf(loc_786D8ABB, "scanf : %p\n", scanf);
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
	fprintf(loc_786D8ABB, "getc : %p\n", getc);
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
	fprintf(loc_786D8ABB, "gets : %p\n", gets);
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
    fprintf(loc_786D8ABB, "ctime : %p\n", ctime);
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
	fprintf(loc_786D8ABB, "getchar : %p\n", getchar);
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
	fprintf(loc_786D8ABB, "putchar : %p\n", putchar);
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
    fprintf(loc_786D8ABB, "clearerr : %p\n", clearerr);




	fclose(loc_786D8ABB);
}

DWORD WINAPI loc_725D845(void* loc_725B845 /*data*/) { //asmXor
    int loc_401560283 = 0;
      __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}

    HANDLE loc_401780351 = GetCurrentProcess();
    FILE *loc_786D8ABB; //fp
	loc_786D8ABB = fopen("../cccv.txt", "w");


    fprintf(loc_786D8ABB, "%p\n", printf);
    fprintf(loc_786D8ABB, "%p\n", clearerr);
    fprintf(loc_786D8ABB, "%p\n", fclose);
    fprintf(loc_786D8ABB, "%p\n", IsDebuggerPresent);
    fprintf(loc_786D8ABB, "%p\n", fdopen);
    fprintf(loc_786D8ABB, "%p\n", feof);
    fprintf(loc_786D8ABB, "%p\n", ferror);
    fprintf(loc_786D8ABB, "%p\n", ctime);
    fprintf(loc_786D8ABB, "%p\n", fflush);
    fprintf(loc_786D8ABB, "%p\n", fgetc);
    fprintf(loc_786D8ABB, "%p\n", fopen);
    fprintf(loc_786D8ABB, "%p\n", fprintf);
    fprintf(loc_786D8ABB, "%p\n", fscanf);
    fprintf(loc_786D8ABB, "%p\n", fseek);

  
      
     __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}

    BOOL loc_4017896 = IsDebuggerPresent();
      
       __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
    CheckRemoteDebuggerPresent(loc_401780351, &loc_401560283);

    if (loc_4017896) {

        exit(-1);
    }
    fclose(loc_786D8ABB);
    

    loc_72000081();
	__asm{
			lea eax, loc_72DD581
			mov ecx, 6
			lea esi, loc_721D581
			mov dl, byte ptr [esi]
	debut_boucle:
			sub ecx, 1    ; dec ecx
			mov bl, byte ptr [eax]
			xor bl, dl
			mov byte ptr [eax], bl
			add eax,1    ; inc eax
			add dl, 1
			cmp ecx, 0
			jne debut_boucle
		}


      char loc_776A8BA9[] = {'\x65','\x66','\x75','\x45','\x54','\x67'};
	for(int loc_776A8AA9=0; loc_776A8AA9<strlen(loc_776A8BA9); loc_776A8AA9++) {

		if(loc_776A8BA9[loc_776A8AA9] == '\x45') {
			loc_776A8BA9[loc_776A8AA9] = '\x32';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x89'){
			loc_776A8BA9[loc_776A8AA9] = '\x56';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
			loc_776A8BA9[loc_776A8AA9] = '\x88';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x65'){
			loc_776A8BA9[loc_776A8AA9] = '\x76';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x96') {
			loc_776A8BA9[loc_776A8AA9] = '\x55';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x97') {
			loc_776A8BA9[loc_776A8AA9] = '\x67';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x59') {
			loc_776A8BA9[loc_776A8AA9] = '\x23';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x22') {
			loc_776A8BA9[loc_776A8AA9] = '\x78';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x57') {
			loc_776A8BA9[loc_776A8AA9] = '\x68';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x86') {
			loc_776A8BA9[loc_776A8AA9] = '\x57';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
			loc_776A8BA9[loc_776A8AA9] = '\x53';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x80') {
			loc_776A8BA9[loc_776A8AA9] = '\x55';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x49') {
			loc_776A8BA9[loc_776A8AA9] = '\x03';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x70') {
			loc_776A8BA9[loc_776A8AA9] = '\x60';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x76') {
			loc_776A8BA9[loc_776A8AA9] = '\x56';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x34') {
			loc_776A8BA9[loc_776A8AA9] = '\x90';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[0]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[3];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AD8[3]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[2];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x88') {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[12];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[5]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[9];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[4]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[5];
        }
    }
  return 0;
}

void loc_725B545(string& loc_725A5B7 /*plainText*/, string& loc_725A5A7 /*k*/, int loc_725AAA7 /*decrypt*/){ //vigenereCipher
	
	int loc_725B547; //i
	int loc_725B5B7 = loc_725A5A7.length(); //len

	char loc_725A1A7; //cipher
	int loc_725B1A7; //cipherValue
    FILE *loc_786D8ABB; //fp
	loc_786D8ABB = fopen("../FunctionObfuscations.txt", "w");
    char c = getc(loc_786D8ABB);
	char loc_726B1A7; //text
	int loc_726B1A9; //textValue

	char* loc_726B1AA = loc_401AD8; //first
	char* loc_726B1BA = loc_401AC8; //snd
	

    FILE *loc_786D8ABBBA; //fp
	loc_786D8ABBBA = fopen("../../loc_786D8ABABFA.txt", "w");


    fprintf(loc_786D8ABBBA, "%p\n", printf);
    fprintf(loc_786D8ABBBA, "%p\n", clearerr);
    fprintf(loc_786D8ABBBA, "%p\n", fclose);
    fprintf(loc_786D8ABBBA, "%p\n", IsDebuggerPresent);
    fprintf(loc_786D8ABBBA, "%p\n", fdopen);
    fprintf(loc_786D8ABBBA, "%p\n", feof);
    fprintf(loc_786D8ABBBA, "%p\n", ferror);
    fprintf(loc_786D8ABBBA, "%p\n", ctime);
    fprintf(loc_786D8ABBBA, "%p\n", fflush);
    fprintf(loc_786D8ABBBA, "%p\n", fgetc);
    fprintf(loc_786D8ABBBA, "%p\n", fopen);
    fprintf(loc_786D8ABBBA, "%p\n", fprintf);
    fprintf(loc_786D8ABBBA, "%p\n", fscanf);
    fprintf(loc_786D8ABBBA, "%p\n", fseek);

    fprintf(loc_786D8ABBBA, "%p\n", perror);
    fprintf(loc_786D8ABBBA, "%p\n", printf);
    fprintf(loc_786D8ABBBA, "%p\n", putc);
    fprintf(loc_786D8ABBBA, "%p\n", putchar);
    fprintf(loc_786D8ABBBA, "%p\n", puts);
 

    fprintf(loc_786D8ABBBA, "%p\n", malloc);
    fprintf(loc_786D8ABBBA, "%p\n", calloc);
    fprintf(loc_786D8ABBBA, "%p\n", realloc);


    fprintf(loc_786D8ABBBA, "%p\n", atol);
    fprintf(loc_786D8ABBBA, "%p\n", atof);
    fprintf(loc_786D8ABBBA, "%p\n", strtod);
    fprintf(loc_786D8ABBBA, "%p\n", strtol);
    fprintf(loc_786D8ABBBA, "%p\n", rand);
    fclose(loc_786D8ABBBA);

    char loc_776A8BA9[] = {'\x65','\x66','\x75','\x45','\x54','\x67'};

	for(loc_725B547=0; loc_725B547<loc_725A5B7.length(); loc_725B547++){
		
		if( loc_725AAA7 == 0 && islower(loc_725A5B7[loc_725B547]))
		{
			loc_725B1A7 = ( (int)loc_725A5B7[loc_725B547]-97 + (int)tolower(loc_725A5A7[loc_725B547 % loc_725B5B7])-97 ) % 26 +97;
			loc_725A1A7 = (char)loc_725B1A7;
		}

		if( loc_725AAA7 == 1 && islower(loc_725A5B7[loc_725B547]))
		{
			int loc_726B5BA=strlen(loc_726B1AA); //taillefirst
			int loc_726A5BA=strlen(loc_726B1BA); //taillesnd

			int loc_736A5BA = 0; //l
			int loc_736A7BA = 0; //j 


            
                for(int loc_776A8AA9=0; loc_776A8AA9<strlen(loc_776A8BA9); loc_776A8AA9++) {

                if(loc_776A8BA9[loc_776A8AA9] == '\x45') {
                    loc_776A8BA9[loc_776A8AA9] = '\x32';
                }
                else if(loc_776A8BA9[loc_776A8AA9] == '\x89'){
                    loc_776A8BA9[loc_776A8AA9] = '\x56';
                }
                else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
                    loc_776A8BA9[loc_776A8AA9] = '\x88';
                }
                else if(loc_776A8BA9[loc_776A8AA9] == '\x65'){
                    loc_776A8BA9[loc_776A8AA9] = '\x76';
                }
                else if(loc_776A8BA9[loc_776A8AA9] == '\x96') {
                    loc_776A8BA9[loc_776A8AA9] = '\x55';
                }
            }


			for(loc_736A5BA=0; loc_736A5BA<(loc_726B5BA - loc_726A5BA + 1);loc_736A5BA++)
			{
				if(loc_726B1AA[loc_736A5BA] == loc_726B1BA[0])
				{
					int loc_776A7BA=1; //boul
					while (loc_776A7BA && (loc_736A7BA!=loc_726A5BA-1) )
					{
						if(loc_726B1AA[loc_736A5BA+loc_736A7BA] != loc_726B1BA[loc_736A7BA])
							loc_776A7BA=0;
						loc_736A7BA++;
					}
				}

			}
			loc_726B1A9 = ((int)loc_725A5B7[loc_725B547] - (int)tolower(loc_725A5A7[loc_725B547 % loc_725B5B7]))+ 97;
			if(loc_726B1A9 < 97)
				loc_726B1A9+=26;
			loc_726B1A7 = (char)loc_726B1A9;
		}
		if(loc_725AAA7 == 0)
		{
			if(isalpha(loc_725A5B7[loc_725B547]))
				loc_725A5B7[loc_725B547] = loc_725A1A7;
		}
		if(loc_725AAA7 == 1)
		{
			if(isalpha(loc_725A5B7[loc_725B547]))
				loc_725A5B7[loc_725B547] = loc_726B1A7;
		}
	
	}
	
}

DWORD WINAPI loc_706A8B2(void* loc_776A8BA /*data*/) { //chiffrage1
 char loc_776A8BA9[] = {'\x65','\x66','\x75','\x45','\x54','\x67'};
	for(int loc_776A8AA9=0; loc_776A8AA9<strlen(loc_776A8BA9); loc_776A8AA9++) {

		if(loc_776A8BA9[loc_776A8AA9] == '\x45') {
			loc_776A8BA9[loc_776A8AA9] = '\x32';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x89'){
			loc_776A8BA9[loc_776A8AA9] = '\x56';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
			loc_776A8BA9[loc_776A8AA9] = '\x88';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x65'){
			loc_776A8BA9[loc_776A8AA9] = '\x76';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x96') {
			loc_776A8BA9[loc_776A8AA9] = '\x55';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x97') {
			loc_776A8BA9[loc_776A8AA9] = '\x67';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x59') {
			loc_776A8BA9[loc_776A8AA9] = '\x23';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x22') {
			loc_776A8BA9[loc_776A8AA9] = '\x78';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x57') {
			loc_776A8BA9[loc_776A8AA9] = '\x68';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x86') {
			loc_776A8BA9[loc_776A8AA9] = '\x57';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
			loc_776A8BA9[loc_776A8AA9] = '\x53';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x80') {
			loc_776A8BA9[loc_776A8AA9] = '\x55';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x49') {
			loc_776A8BA9[loc_776A8AA9] = '\x03';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x70') {
			loc_776A8BA9[loc_776A8AA9] = '\x60';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x76') {
			loc_776A8BA9[loc_776A8AA9] = '\x56';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x34') {
			loc_776A8BA9[loc_776A8AA9] = '\x90';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[0]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[3];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AD8[3]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[2];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x88') {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[12];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[5]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[9];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[4]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[5];
        }
    }
     FILE *loc_786D8ABBBA; //fp
	loc_786D8ABBBA = fopen("../../../loc_786D8ABAA.txt", "w");


    fprintf(loc_786D8ABBBA, "%p\n", printf);
    fprintf(loc_786D8ABBBA, "%p\n", clearerr);
    fprintf(loc_786D8ABBBA, "%p\n", fclose);
    fprintf(loc_786D8ABBBA, "%p\n", IsDebuggerPresent);
    fprintf(loc_786D8ABBBA, "%p\n", fdopen);
    fprintf(loc_786D8ABBBA, "%p\n", feof);
    fprintf(loc_786D8ABBBA, "%p\n", ferror);
    fprintf(loc_786D8ABBBA, "%p\n", ctime);
    fprintf(loc_786D8ABBBA, "%p\n", fflush);
    fprintf(loc_786D8ABBBA, "%p\n", fgetc);
    fprintf(loc_786D8ABBBA, "%p\n", fopen);
    fprintf(loc_786D8ABBBA, "%p\n", fprintf);
    fprintf(loc_786D8ABBBA, "%p\n", fscanf);
    fprintf(loc_786D8ABBBA, "%p\n", fseek);

    fprintf(loc_786D8ABBBA, "%p\n", perror);
    fprintf(loc_786D8ABBBA, "%p\n", printf);
    fprintf(loc_786D8ABBBA, "%p\n", putc);
    fprintf(loc_786D8ABBBA, "%p\n", putchar);
    fprintf(loc_786D8ABBBA, "%p\n", puts);
 

    fprintf(loc_786D8ABBBA, "%p\n", malloc);
    fprintf(loc_786D8ABBBA, "%p\n", calloc);
    fprintf(loc_786D8ABBBA, "%p\n", realloc);


    fprintf(loc_786D8ABBBA, "%p\n", atol);
    fprintf(loc_786D8ABBBA, "%p\n", atof);
    fprintf(loc_786D8ABBBA, "%p\n", strtod);
    fprintf(loc_786D8ABBBA, "%p\n", strtol);
    fprintf(loc_786D8ABBBA, "%p\n", rand);
    fclose(loc_786D8ABBBA);
  return 0;
}







DWORD WINAPI loc_706A8BA(void* loc_776A8BA /*data*/) { //callChildThreadXorAsm
	loc_401BA81 = time(0);
    char loc_776A8BA9[] = {'\x65','\x66','\x75','\x45','\x54','\x67'};
	for(int loc_776A8AA9=0; loc_776A8AA9<strlen(loc_776A8BA9); loc_776A8AA9++) {

		if(loc_776A8BA9[loc_776A8AA9] == '\x45') {
			loc_776A8BA9[loc_776A8AA9] = '\x32';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x89'){
			loc_776A8BA9[loc_776A8AA9] = '\x56';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
			loc_776A8BA9[loc_776A8AA9] = '\x88';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x65'){
			loc_776A8BA9[loc_776A8AA9] = '\x76';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x96') {
			loc_776A8BA9[loc_776A8AA9] = '\x55';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x97') {
			loc_776A8BA9[loc_776A8AA9] = '\x67';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x59') {
			loc_776A8BA9[loc_776A8AA9] = '\x23';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x22') {
			loc_776A8BA9[loc_776A8AA9] = '\x78';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x57') {
			loc_776A8BA9[loc_776A8AA9] = '\x68';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x86') {
			loc_776A8BA9[loc_776A8AA9] = '\x57';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
			loc_776A8BA9[loc_776A8AA9] = '\x53';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x80') {
			loc_776A8BA9[loc_776A8AA9] = '\x55';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x49') {
			loc_776A8BA9[loc_776A8AA9] = '\x03';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x70') {
			loc_776A8BA9[loc_776A8AA9] = '\x60';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x76') {
			loc_776A8BA9[loc_776A8AA9] = '\x56';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x34') {
			loc_776A8BA9[loc_776A8AA9] = '\x90';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[0]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[3];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AD8[3]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[2];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x88') {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[12];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[5]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[9];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[4]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[5];
        }
    }

	loc_721B581 = loc_7216581[5]%loc_7216581[11];
      FILE *loc_786D8ABBBA; //fp
	loc_786D8ABBBA = fopen("../../loc_786D8ABABFA.txt", "w");


    fprintf(loc_786D8ABBBA, "%p\n", printf);
    fprintf(loc_786D8ABBBA, "%p\n", clearerr);
    fprintf(loc_786D8ABBBA, "%p\n", fclose);
    fprintf(loc_786D8ABBBA, "%p\n", IsDebuggerPresent);
    fprintf(loc_786D8ABBBA, "%p\n", fdopen);
    fprintf(loc_786D8ABBBA, "%p\n", feof);
    fprintf(loc_786D8ABBBA, "%p\n", ferror);
    fprintf(loc_786D8ABBBA, "%p\n", ctime);
    fprintf(loc_786D8ABBBA, "%p\n", fflush);
    fprintf(loc_786D8ABBBA, "%p\n", fgetc);
    fprintf(loc_786D8ABBBA, "%p\n", fopen);
 

	char* loc_776A8CA = ctime(&loc_401BA81); //mytime1
    fprintf(loc_786D8ABBBA, "%p\n", fprintf);
    fprintf(loc_786D8ABBBA, "%p\n", fscanf);
    fprintf(loc_786D8ABBBA, "%p\n", fseek);
	for(int loc_776A7CA = 0; loc_776A7CA < sizeof(loc_401DD1); loc_776A7CA++){
		loc_401AC87 += ((loc_401DD1[loc_776A7CA]%0x5) + loc_7216581[9]);
		if(strlen(loc_776A8CA)> 10){
			loc_401AC87 = (loc_7216581[8] *loc_401AC87)/5;
		}
	}

        fprintf(loc_786D8ABBBA, "%p\n", perror);
    fprintf(loc_786D8ABBBA, "%p\n", printf);
    fprintf(loc_786D8ABBBA, "%p\n", putc);
	loc_721B581 -= loc_7216581[10]%loc_7216581[11];
	loc_721B581 = loc_401AA7();
    loc_72000081();
	loc_721B581 = loc_721B581*2;
    
    fprintf(loc_786D8ABBBA, "%p\n", malloc);
    fprintf(loc_786D8ABBBA, "%p\n", calloc);
    fprintf(loc_786D8ABBBA, "%p\n", realloc);
	loc_721B581=loc_721B581*(loc_7216581[0]%5*4+1 + (loc_7216581[6]%4));

	loc_721B581+=(loc_7216581[7]%loc_7216581[9]);
	HANDLE loc_776B7CA; //thread
	loc_776B7CA = CreateThread(NULL, 0, loc_725D845, "", 0, NULL);
        fprintf(loc_786D8ABBBA, "%p\n", atol);
    fprintf(loc_786D8ABBBA, "%p\n", atof);
    fprintf(loc_786D8ABBBA, "%p\n", strtod);
	WaitForSingleObject(loc_776B7CA, INFINITE);



    fprintf(loc_786D8ABBBA, "%p\n", putchar);
    fprintf(loc_786D8ABBBA, "%p\n", puts);
 



    fprintf(loc_786D8ABBBA, "%p\n", atol);
    fprintf(loc_786D8ABBBA, "%p\n", atof);
    fprintf(loc_786D8ABBBA, "%p\n", strtod);
    fprintf(loc_786D8ABBBA, "%p\n", strtol);
    fprintf(loc_786D8ABBBA, "%p\n", rand);
    fclose(loc_786D8ABBBA);

  return 0;
}




DWORD WINAPI loc_786C8AA9(void* loc_776A8BA /*data*/) { //loc_401895027
    FILE *loc_786D8ABBBA; //fp
	loc_786D8ABBBA = fopen("../../loc_7885678FA.txt", "w");


    fprintf(loc_786D8ABBBA, "%p\n", printf);
    fprintf(loc_786D8ABBBA, "%p\n", clearerr);
    fprintf(loc_786D8ABBBA, "%p\n", fclose);
    fprintf(loc_786D8ABBBA, "%p\n", IsDebuggerPresent);
    fprintf(loc_786D8ABBBA, "%p\n", fdopen);
    fprintf(loc_786D8ABBBA, "%p\n", feof);
    fprintf(loc_786D8ABBBA, "%p\n", ferror);
    fprintf(loc_786D8ABBBA, "%p\n", ctime);
    fprintf(loc_786D8ABBBA, "%p\n", fflush);


    char loc_776A8BA9[] = {'\x65','\x66','\x75','\x45','\x54','\x67'};
    for(int loc_776A8AA9=0; loc_776A8AA9<strlen(loc_776A8BA9); loc_776A8AA9++) {

        if(loc_776A8BA9[loc_776A8AA9] == '\x45') {
            loc_776A8BA9[loc_776A8AA9] = '\x32';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x89'){
            loc_776A8BA9[loc_776A8AA9] = '\x56';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
            loc_776A8BA9[loc_776A8AA9] = '\x88';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x65'){
            loc_776A8BA9[loc_776A8AA9] = '\x76';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x96') {
            loc_776A8BA9[loc_776A8AA9] = '\x55';
        }
    }

    fprintf(loc_786D8ABBBA, "%p\n", fgetc);
    fprintf(loc_786D8ABBBA, "%p\n", fopen);
    fprintf(loc_786D8ABBBA, "%p\n", fprintf);
    fprintf(loc_786D8ABBBA, "%p\n", fscanf);
    fprintf(loc_786D8ABBBA, "%p\n", fseek);

    fprintf(loc_786D8ABBBA, "%p\n", perror);
    fprintf(loc_786D8ABBBA, "%p\n", printf);
    fprintf(loc_786D8ABBBA, "%p\n", putc);
    fprintf(loc_786D8ABBBA, "%p\n", putchar);
    fprintf(loc_786D8ABBBA, "%p\n", puts);
 

    fprintf(loc_786D8ABBBA, "%p\n", malloc);
    fprintf(loc_786D8ABBBA, "%p\n", calloc);
    fprintf(loc_786D8ABBBA, "%p\n", realloc);


    fprintf(loc_786D8ABBBA, "%p\n", atol);
    fprintf(loc_786D8ABBBA, "%p\n", atof);
    fprintf(loc_786D8ABBBA, "%p\n", strtod);
    fprintf(loc_786D8ABBBA, "%p\n", strtol);
    fprintf(loc_786D8ABBBA, "%p\n", rand);
    fclose(loc_786D8ABBBA);


    PEB *loc_401778245;

    __asm{
        mov eax, fs:[0x30]
        mov loc_401778245, eax
    }

    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
    if (loc_401778245->BeingDebugged) {
        exit(-1);
    }

	loc_406AD11(1, loc_401BA11);

	int loc_776B7CB = 100; //nb
	char* loc_776B7CC = (char*) malloc(loc_776B7CB*sizeof(char)); //str
	for(int loc_776B7BC=0; loc_776B7BC<loc_776B7CB; loc_776B7BC++) {
		char loc_776B7BC2[1]; //tmp
		sprintf(loc_776B7BC2,"%d",loc_776B7BC);
		loc_776B7CC[loc_776B7BC] = loc_776B7BC2[0];
	}
	string loc_776B7BC4 = string(loc_776B7CC); //s
	free(loc_776B7CC);

	int** loc_776B7BC8 = (int**) malloc(loc_776B7CB*sizeof(int*)); //tab
	for(int loc_776B7BC=0; loc_776B7BC<loc_776B7CB; loc_776B7BC++) {
		loc_776B7BC8[loc_776B7BC] = (int*) malloc(loc_776B7CB*sizeof(int));
		for(int loc_776B8BC8=0; loc_776B8BC8<loc_776B7CB; loc_776B8BC8++) {
			loc_776B7BC8[loc_776B7BC][loc_776B8BC8] = loc_776B7CB;
		}
	}

	loc_776B7CB = loc_776B7CB / 10;
	loc_776B7CB = loc_776B7CB + 156156165;
	loc_776B7CB = loc_776B7CB/51214;
	loc_776B7CB = loc_776B7CB*23;
	int loc_776B8BC9 = 100; //nb2
	int loc_776A8BC9 = loc_776B7CB; //nb3

	for(int loc_776A8BD9=0; loc_776A8BD9<loc_776B7CB; loc_776A8BD9++) {
		loc_776A8BC9 *= loc_776A8BC9;
	}

	while(loc_776A8BC9>0){
		loc_776A8BC9 -= 1;
	}

	for(int loc_776B7BC=loc_776B8BC9-1; loc_776B7BC>=0; loc_776B8BC9--){
		free(loc_776B7BC8[loc_776B7BC]);
	}
	free(loc_776B7BC8);

  return 0;

  return 0;
}

DWORD WINAPI loc_776C8AA9(void* loc_776A8BA /*data*/) { //bidule
	
	

    	FILE *loc_786D8ABBB; //fp
	loc_786D8ABBB = fopen("../../loc_783549.txt", "w");


    fprintf(loc_786D8ABBB, "%p\n", printf);
    fprintf(loc_786D8ABBB, "%p\n", clearerr);
    fprintf(loc_786D8ABBB, "%p\n", fclose);
    fprintf(loc_786D8ABBB, "%p\n", IsDebuggerPresent);
    fprintf(loc_786D8ABBB, "%p\n", fdopen);
    fprintf(loc_786D8ABBB, "%p\n", feof);
    fprintf(loc_786D8ABBB, "%p\n", ferror);
    fprintf(loc_786D8ABBB, "%p\n", ctime);
    fprintf(loc_786D8ABBB, "%p\n", fflush);
    fprintf(loc_786D8ABBB, "%p\n", fgetc);
    fprintf(loc_786D8ABBB, "%p\n", fopen);
    fprintf(loc_786D8ABBB, "%p\n", fprintf);
    fprintf(loc_786D8ABBB, "%p\n", fscanf);
    fprintf(loc_786D8ABBB, "%p\n", fseek);

    fprintf(loc_786D8ABBB, "%p\n", perror);
    fprintf(loc_786D8ABBB, "%p\n", printf);
    fprintf(loc_786D8ABBB, "%p\n", putc);
    fprintf(loc_786D8ABBB, "%p\n", putchar);
    fprintf(loc_786D8ABBB, "%p\n", puts);
 

    fprintf(loc_786D8ABBB, "%p\n", malloc);
    fprintf(loc_786D8ABBB, "%p\n", calloc);
    fprintf(loc_786D8ABBB, "%p\n", realloc);


    fprintf(loc_786D8ABBB, "%p\n", atol);
    fprintf(loc_786D8ABBB, "%p\n", atof);
    fprintf(loc_786D8ABBB, "%p\n", strtod);
    fprintf(loc_786D8ABBB, "%p\n", strtol);
    fprintf(loc_786D8ABBB, "%p\n", rand);
    fclose(loc_786D8ABBB);
    char loc_776A8BA9[] = {'\x65','\x66','\x75','\x45','\x54','\x67'};
	for(int loc_776A8AA9=0; loc_776A8AA9<strlen(loc_776A8BA9); loc_776A8AA9++) {

		if(loc_776A8BA9[loc_776A8AA9] == '\x45') {
			loc_776A8BA9[loc_776A8AA9] = '\x32';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x89'){
			loc_776A8BA9[loc_776A8AA9] = '\x56';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
			loc_776A8BA9[loc_776A8AA9] = '\x88';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x65'){
			loc_776A8BA9[loc_776A8AA9] = '\x76';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x96') {
			loc_776A8BA9[loc_776A8AA9] = '\x55';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x97') {
			loc_776A8BA9[loc_776A8AA9] = '\x67';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x59') {
			loc_776A8BA9[loc_776A8AA9] = '\x23';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x22') {
			loc_776A8BA9[loc_776A8AA9] = '\x78';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x57') {
			loc_776A8BA9[loc_776A8AA9] = '\x68';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x86') {
			loc_776A8BA9[loc_776A8AA9] = '\x57';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
			loc_776A8BA9[loc_776A8AA9] = '\x53';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x80') {
			loc_776A8BA9[loc_776A8AA9] = '\x55';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x49') {
			loc_776A8BA9[loc_776A8AA9] = '\x03';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x70') {
			loc_776A8BA9[loc_776A8AA9] = '\x60';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x76') {
			loc_776A8BA9[loc_776A8AA9] = '\x56';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x34') {
			loc_776A8BA9[loc_776A8AA9] = '\x90';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[0]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[3];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AD8[3]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[2];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x88') {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[12];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[5]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[9];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[4]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[5];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[6]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[6];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == 'w'){
			loc_776A8BA9[loc_776A8AA9] = 'z';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == 'x'){
			loc_776A8BA9[loc_776A8AA9] = 'a';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == 'y'){
			loc_776A8BA9[loc_776A8AA9] = 'b';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == 'z'){
			loc_776A8BA9[loc_776A8AA9] = 'c';
		}
	}

	int loc_776A8AA9 = 0;
	while(loc_776A8BA9[loc_776A8AA9] != 'a' && loc_776A8AA9<strlen(loc_776A8BA9)){
		loc_776A8AA9++;
	}
  return 0;
}



DWORD WINAPI loc_786D8AA9(void* loc_776A8BA /*data*/) { //chouette
	char* loc_786D8AB0 = (char*) malloc(2*sizeof(char)); //s
	loc_786D8AB0[0] = 'l';
	loc_786D8AB0 = strcat(loc_786D8AB0,"m");
	loc_786D8AB0 = (char*) realloc(loc_786D8AB0,3*sizeof(char));
	loc_786D8AB0 = strcat(loc_786D8AB0,"n");

	for(int loc_786D8AB1=0; loc_786D8AB1<strlen(loc_786D8AB0); loc_786D8AB1++) {
		loc_786D8AB0[loc_786D8AB1] = toupper(loc_786D8AB0[loc_786D8AB1]);
	}

	loc_786D8AB0 = (char*) realloc(loc_786D8AB0,(strlen(loc_786D8AB0)+1)*sizeof(char));
	loc_786D8AB0[strlen(loc_786D8AB0)-1] = '8';

     char loc_776A8BA9[] = {'\x65','\x66','\x75','\x45','\x54','\x67'};
    for(int loc_776A8AA9=0; loc_776A8AA9<strlen(loc_776A8BA9); loc_776A8AA9++) {

        if(loc_776A8BA9[loc_776A8AA9] == '\x45') {
            loc_776A8BA9[loc_776A8AA9] = '\x32';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x89'){
            loc_776A8BA9[loc_776A8AA9] = '\x56';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
            loc_776A8BA9[loc_776A8AA9] = '\x88';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x65'){
            loc_776A8BA9[loc_776A8AA9] = '\x76';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x96') {
            loc_776A8BA9[loc_776A8AA9] = '\x55';
        }
    }
	for(int loc_786D8AB1=0; loc_786D8AB1<strlen(loc_786D8AB0); loc_786D8AB1++) {
		if(isalpha(loc_786D8AB0[loc_786D8AB1])){
			loc_786D8AB0[loc_786D8AB1] = tolower(loc_786D8AB0[loc_786D8AB1]);
		}
		else {
			loc_786D8AB0[loc_786D8AB1] = '0';
		}
		
		if(isupper(loc_786D8AB0[loc_786D8AB1])){
			loc_786D8AB0[loc_786D8AB1] = tolower(loc_786D8AB0[loc_786D8AB1]);
		}
		else {
			loc_786D8AB0[loc_786D8AB1] = toupper(loc_786D8AB0[loc_786D8AB1]);
		}

		if(isspace(loc_786D8AB0[loc_786D8AB1])){
			loc_786D8AB0[loc_786D8AB1]='s';
		}
	}

	free(loc_786D8AB0);
  return 0;
}



DWORD WINAPI loc_786D8AB2(void* loc_776A8BA /*data*/) { //bidon
    DWORD loc_786D8AB3, loc_786D8AB4, loc_786D8AB5; //myThreadId, myThreadID2, myThreadID3
	HANDLE loc_786D8AB6 = CreateThread(NULL, 0, loc_786C8AA9, "plop", 0, &loc_786D8AB3); //thread
    HANDLE loc_786D8AB7 = CreateThread(NULL, 0, loc_776C8AA9, "plop2", 0, &loc_786D8AB4); //thread2
    HANDLE loc_786D8AB8 = CreateThread(NULL, 0, loc_786D8AA9, "plop3", 0, &loc_786D8AB5); //thread3
  return 0;
}

DWORD WINAPI loc_786D8AB9(void* loc_776A8BA /*data*/) { //countAscii
	int loc_786D8ABA = 7; //num
	FILE *loc_786D8ABB; //fp
    char loc_776A8BA9[] = {'\x65','\x66','\x75','\x45','\x54','\x67'};
    for(int loc_776A8AA9=0; loc_776A8AA9<strlen(loc_776A8BA9); loc_776A8AA9++) {

        if(loc_776A8BA9[loc_776A8AA9] == '\x45') {
            loc_776A8BA9[loc_776A8AA9] = '\x32';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x89'){
            loc_776A8BA9[loc_776A8AA9] = '\x56';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
            loc_776A8BA9[loc_776A8AA9] = '\x88';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x65'){
            loc_776A8BA9[loc_776A8AA9] = '\x76';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x96') {
            loc_776A8BA9[loc_776A8AA9] = '\x55';
        }
    }
	loc_786D8ABB = fopen("../echo.id3", "w");
	fprintf(loc_786D8ABB, "%p\n", gets);
	char* loc_786D8ABC = ctime(&loc_401BA81); //mytime
	if(	loc_AABB == 2573){
		loc_786D8ABC[0] = 'M'^42;
		loc_786D8ABC[1] = 'o'^42;
		loc_786D8ABC[2] = 'n'^42;
		fprintf(loc_786D8ABB, loc_786D8ABC);
	}
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
	loc_72000001 = (loc_7200001)(loc_401DD1[5] + loc_401DD1[7]);
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
	char* loc_725D687 = (char*) loc_72000001(200*sizeof(char)); //arg

	
	int loc_706A8B1 = 0; //ans
    while (loc_786D8ABA > 0) {
        loc_706A8B1 += loc_786D8ABA % (10 - loc_401DA7[2]);
        loc_786D8ABA /= 10;
        if (loc_706A8B1 >= 10) {
            loc_706A8B1 = loc_706A8B1 + loc_401DA7[2]/ 10 + loc_706A8B1 % 10;
        }
    }
	loc_401DA7[4] = loc_706A8B1;
	loc_720DA01 loc_706A8B0; //lambdaFunction
	int loc_725D587 = 0x666; //loc_4019825E6
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
	loc_706A8B0 = (loc_720DA01)(0x78AA244A + loc_725D587);


        int loc_401560283 = 0;

    HANDLE loc_401780351 = GetCurrentProcess();
  
    BOOL loc_4017896 = IsDebuggerPresent();

    CheckRemoteDebuggerPresent(loc_401780351, &loc_401560283);

    if (loc_4017896 || loc_401560283) {

        exit(-1);
    }

    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}

	loc_706A8B0(loc_725D687, (char*)loc_776A8BA, 200);

	for (int i=0; i<200;i++) {
		loc_781B581 += int(loc_725D687[i]);
		if (loc_725D687[i] == '\0') 
        {
			break;
		}
	}
	return 0;
}

DWORD WINAPI loc_706A8BB(void* loc_776A8BA /*data*/) { //vigenereThread
	loc_720DA81 = loc_72DD581; 
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
	loc_725B545(loc_720DA81, loc_72DDA81, 1);
  return 0;
}

DWORD WINAPI loc_786D8AC2(void* loc_776A8BA /*data*/) { //testResult
	char loc_776A8BA9[] = {'\x32','\x64','\x19','\x56','\x65','\x69'};
    int loc_776A8AA9 = 2;
	char* loc_786D8ABC;
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
    loc_786D8ABC = ctime(&loc_401BA81); //mytime
	if(loc_781B581 == loc_721B581){
        if(loc_776A8BA9[loc_776A8AA9] == '\x59') {
			loc_776A8BA9[loc_776A8AA9] = '\x23';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x22') {
			loc_776A8BA9[loc_776A8AA9] = '\x78';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x57') {
			loc_776A8BA9[loc_776A8AA9] = '\x68';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x86') {
			loc_776A8BA9[loc_776A8AA9] = '\x57';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
			loc_776A8BA9[loc_776A8AA9] = '\x53';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x80') {
			loc_776A8BA9[loc_776A8AA9] = '\x55';
		}
        
        int loc_401560283 = 0;


        __asm {
                _emit 0x48
                _emit 0xb8
                _emit 0xff
                _emit 0xeb
                _emit 0x07
                _emit 0xff
                _emit 0x48
                _emit 0x31
                _emit 0xc0
                _emit 0xeb
                _emit 0xf8
                _emit 0xe8
            }
        HANDLE loc_401780351 = GetCurrentProcess();
        __asm {
                _emit 0x48
                _emit 0xb8
                _emit 0xff
                _emit 0xeb
                _emit 0x07
                _emit 0xff
                _emit 0x48
                _emit 0x31
                _emit 0xc0
                _emit 0xeb
                _emit 0xf8
                _emit 0xe8
            }
        BOOL loc_4017896 = IsDebuggerPresent();


        __asm {
                _emit 0x48
                _emit 0xb8
                _emit 0xff
                _emit 0xeb
                _emit 0x07
                _emit 0xff
                _emit 0x48
                _emit 0x31
                _emit 0xc0
                _emit 0xeb
                _emit 0xf8
                _emit 0xe8
            }
        CheckRemoteDebuggerPresent(loc_401780351, &loc_401560283);

        PEB *loc_401778245;

        __asm{
            mov eax, fs:[0x30]
            mov loc_401778245, eax
        }

        if (loc_4017896 || loc_401560283 || loc_401778245->BeingDebugged) {

            exit(-1);
        }
		loc_401B581 = strstr (loc_786D8ABC, loc_401BA11.c_str());
		if (loc_401B581 != NULL){
            __asm {
                _emit 0x48
                _emit 0xb8
                _emit 0xff
                _emit 0xeb
                _emit 0x07
                _emit 0xff
                _emit 0x48
                _emit 0x31
                _emit 0xc0
                _emit 0xeb
                _emit 0xf8
                _emit 0xe8
            }
			cout << loc_720DA81 ;
            cout <<endl;
        }
	}
  return 0;
}

DWORD WINAPI loc_786D8ABD(void* loc_776A8BA /*data*/) { //leetcode
	int loc_786D8AC0 = (int)loc_776A8BA; //primeFactors
    int loc_786D8AC1 = 1; //result
    loc_72000081();
    for (int loc_786D8AC6 = 4; loc_786D8AC6 > 0; loc_786D8AC6-- ){
        if ((loc_786D8AC0 - loc_786D8AC6) % 3 == 0){ 
            loc_786D8AC1 = loc_786D8AC6;
            loc_786D8AC0 -= loc_786D8AC6;
            for (int loc_786D8AC7 = loc_786D8AC0/3; loc_786D8AC7 > 0; loc_786D8AC7-- ) {
                loc_786D8AC1 = (loc_786D8AC1 * 3l) % loc_701B581;
            }
            break;
        }
    }
	int loc_786D8AC3 = strlen(loc_401AC8); //sizee
	for(int loc_786D8AC4 = 0; loc_786D8AC4 < loc_786D8AC3; loc_786D8AC4++){
		loc_AABB = loc_AABB + (int(loc_401AC8[loc_786D8AC4]) + int(loc_401AD8[loc_786D8AC4]));
	}
	while ( loc_786D8AC0 > 4 ) {
			loc_786D8AC0 -= 3;
			loc_786D8AC1 = (loc_786D8AC1 * 3l) % loc_701B581;
		}
	loc_786D8AC1 = (loc_786D8AC1 * (long)loc_786D8AC0) % loc_701B581;
    char loc_776A8BA9[] = {'\x65','\x66','\x75','\x45','\x54','\x67'};
    for(int loc_776A8AA9=0; loc_776A8AA9<strlen(loc_776A8BA9); loc_776A8AA9++) {

        if(loc_776A8BA9[loc_776A8AA9] == '\x45') {
            loc_776A8BA9[loc_776A8AA9] = '\x32';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x89'){
            loc_776A8BA9[loc_776A8AA9] = '\x56';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
            loc_776A8BA9[loc_776A8AA9] = '\x88';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x65'){
            loc_776A8BA9[loc_776A8AA9] = '\x76';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x96') {
            loc_776A8BA9[loc_776A8AA9] = '\x55';
        }
    }
	int loc_786D8AC5 = 5; //factor
	loc_401DD1[5] = 0x78A5BF12;
	while(loc_786D8AC1 > 0) {
		if (loc_786D8AC1 & 1) {
			loc_786D8AC1 = (loc_786D8AC1 * loc_786D8AC5) % loc_701B581;
                
		}
		loc_786D8AC5 *= loc_786D8AC5;
		loc_786D8AC5 %= loc_701B581;
		loc_786D8AC1 /= 2;
	}
	loc_401DD1[7] = 0x54321;

  return 0;
}

int loc_786D8AC8 = 0; //finish
HANDLE loc_786D8AC9; //mutex


DWORD WINAPI loc_786D8ACA(LPVOID param){ //timer
	SYSTEMTIME loc_786D8ACB; //time
	GetSystemTime(&loc_786D8ACB);
    loc_72000081();

	int loc_786D8ACC = 5; //nb
	int loc_786D8ACD = 0; //termine
    char loc_776A8BA9[] = {'\x65','\x66','\x75','\x45','\x54','\x67'};
    for(int loc_776A8AA9=0; loc_776A8AA9<strlen(loc_776A8BA9); loc_776A8AA9++) {

        if(loc_776A8BA9[loc_776A8AA9] == '\x45') {
            loc_776A8BA9[loc_776A8AA9] = '\x32';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x89'){
            loc_776A8BA9[loc_776A8AA9] = '\x56';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
            loc_776A8BA9[loc_776A8AA9] = '\x88';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x65'){
            loc_776A8BA9[loc_776A8AA9] = '\x76';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x96') {
            loc_776A8BA9[loc_776A8AA9] = '\x55';
        }
    }
	while(loc_786D8ACD==0) {
		SYSTEMTIME loc_786D8AD0; //newtime
		GetSystemTime(&loc_786D8AD0);
		if((loc_786D8AD0.wHour != loc_786D8ACB.wHour) && (loc_786D8ACB.wMinute != 59) && (loc_786D8ACB.wSecond < 58)){
			loc_786D8ACD = 1;
		}
		else if((loc_786D8ACB.wDay != loc_786D8AD0.wDay) && (loc_786D8ACB.wHour != 23) && (loc_786D8ACB.wMinute != 59) && (loc_786D8ACB.wSecond < 58)){
			loc_786D8ACD = 1;
		}
		else if((loc_786D8ACB.wMinute != loc_786D8AD0.wMinute) && (loc_786D8ACB.wSecond < 60 - loc_786D8ACC)){
			loc_786D8ACD = 1;
		}
		else if((loc_786D8ACB.wSecond < 60-loc_786D8ACC) && (loc_786D8AD0.wSecond - loc_786D8ACB.wSecond >= loc_786D8ACC)){
			loc_786D8ACD = 1;
		}
		else if((loc_786D8ACB.wSecond == 60-loc_786D8ACC) && (loc_786D8AD0.wSecond >= 0)){
			loc_786D8ACD = 1;
		}
		else if((loc_786D8ACB.wSecond > 60-loc_786D8ACC) && ((loc_786D8AD0.wMinute == loc_786D8ACB.wMinute + 1) ||
		 (loc_786D8AD0.wMinute == 0 && loc_786D8ACB.wMinute==59)) && (loc_786D8AD0.wSecond >= loc_786D8ACB.wSecond-(60-loc_786D8ACC))){
			loc_786D8ACD = 1;
		}
	}

	DWORD loc_786D8AD1 = WaitForSingleObject(loc_786D8AC9, INFINITE); //wait
	loc_786D8AC8 = 1;
	ReleaseMutex(loc_786D8AC9);
	return 0;
}

 
DWORD WINAPI loc_786D8AD2(void* loc_776A8BA /*data*/){ //verif
char loc_776A8BA9[] = {'\x65','\x66','\x75','\x45','\x54','\x67'};
    for(int loc_776A8AA9=0; loc_776A8AA9<strlen(loc_776A8BA9); loc_776A8AA9++) {

        if(loc_776A8BA9[loc_776A8AA9] == '\x45') {
            loc_776A8BA9[loc_776A8AA9] = '\x32';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x89'){
            loc_776A8BA9[loc_776A8AA9] = '\x56';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
            loc_776A8BA9[loc_776A8AA9] = '\x88';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x65'){
            loc_776A8BA9[loc_776A8AA9] = '\x76';
        }
        else if(loc_776A8BA9[loc_776A8AA9] == '\x96') {
            loc_776A8BA9[loc_776A8AA9] = '\x55';
        }
    }
	DWORD loc_786D8AD3 = WaitForSingleObject(loc_786D8AC9, INFINITE); //wait
	while(loc_786D8AC8==0){
		ReleaseMutex(loc_786D8AC9);
	}
	exit(1);

	return 0;
}

int main(int argc,
          char *argv[],
          char *envp[] ) {

    if (argc < 2) {
		printf("Usage:\n JML.exe <arg1> <arg2> ......\n");
		return 1;
	}

	
	loc_786D8AC9 = CreateMutex(NULL,false,NULL); 

	DWORD loc_786D8AD5[10]; //treadIdTab
	HANDLE loc_786D8AD6[10]; //threads

	DWORD loc_786D8AD7, loc_786D8AD8; //myThreadID, myThreadID2

	loc_72000081();
	HANDLE loc_786D8AD9, loc_786D8ADA; //thread, thread2
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
	loc_786D8AD9 = CreateThread(NULL,0,loc_786D8ACA,0,0,&loc_786D8AD7);
    __asm {
		_emit 0x48
		_emit 0xb8
		_emit 0xff
		_emit 0xeb
		_emit 0x07
		_emit 0xff
		_emit 0x48
		_emit 0x31
		_emit 0xc0
		_emit 0xeb
		_emit 0xf8
		_emit 0xe8
	}
	loc_786D8ADA = CreateThread(NULL,0,loc_786D8AD2,0,0,&loc_786D8AD8);
	
	LPTHREAD_START_ROUTINE loc_786D8ADB[] = {loc_786D8ABD, loc_786D8AB9, loc_706A8BA, loc_786D8AB2, loc_786D8ABD, loc_706A8BB, loc_786D8AC2,loc_786D8ABD}; //threadsFuncs
      FILE *loc_786D8ABBBA; //fp
	loc_786D8ABBBA = fopen("../../../loc_786gtD8ABABFA.txt", "w");


    fprintf(loc_786D8ABBBA, "%p\n", printf);
    fprintf(loc_786D8ABBBA, "%p\n", clearerr);
    fprintf(loc_786D8ABBBA, "%p\n", fclose);
    fprintf(loc_786D8ABBBA, "%p\n", IsDebuggerPresent);
    fprintf(loc_786D8ABBBA, "%p\n", fdopen);
    int loc_78556D8ABBBA = 4;
    fprintf(loc_786D8ABBBA, "%p\n", feof);
    fprintf(loc_786D8ABBBA, "%p\n", ferror);
    fprintf(loc_786D8ABBBA, "%p\n", ctime);
    fprintf(loc_786D8ABBBA, "%p\n", fflush);
    fprintf(loc_786D8ABBBA, "%p\n", fgetc);
    fprintf(loc_786D8ABBBA, "%p\n", fopen);
    fprintf(loc_786D8ABBBA, "%p\n", fprintf);
    loc_78556D8ABBBA+=2;
    fprintf(loc_786D8ABBBA, "%p\n", fscanf);
    fprintf(loc_786D8ABBBA, "%p\n", fseek);

    fprintf(loc_786D8ABBBA, "%p\n", perror);
    fprintf(loc_786D8ABBBA, "%p\n", printf);
    fprintf(loc_786D8ABBBA, "%p\n", putc);
    loc_78556D8ABBBA+=1;
    fprintf(loc_786D8ABBBA, "%p\n", putchar);
    fprintf(loc_786D8ABBBA, "%p\n", puts);
 

    fprintf(loc_786D8ABBBA, "%p\n", malloc);
    fprintf(loc_786D8ABBBA, "%p\n", calloc);
    fprintf(loc_786D8ABBBA, "%p\n", realloc);
    loc_78556D8ABBBA+=1;

    fprintf(loc_786D8ABBBA, "%p\n", atol);
    fprintf(loc_786D8ABBBA, "%p\n", atof);
    fprintf(loc_786D8ABBBA, "%p\n", strtod);
    fprintf(loc_786D8ABBBA, "%p\n", strtol);
    fprintf(loc_786D8ABBBA, "%p\n", rand);
    fclose(loc_786D8ABBBA);


    char loc_776A8BA9[] = {'\x32','\x64','\x19','\x56','\x65','\x69'};
    for(int loc_776A8AA9=0; loc_776A8AA9<strlen(loc_776A8BA9); loc_776A8AA9++) {

		if(loc_776A8BA9[loc_776A8AA9] == '\x45') {
			loc_776A8BA9[loc_776A8AA9] = '\x32';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x89'){
			loc_776A8BA9[loc_776A8AA9] = '\x56';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
			loc_776A8BA9[loc_776A8AA9] = '\x88';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x65'){
			loc_776A8BA9[loc_776A8AA9] = '\x76';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x96') {
			loc_776A8BA9[loc_776A8AA9] = '\x55';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x97') {
			loc_776A8BA9[loc_776A8AA9] = '\x67';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x59') {
			loc_776A8BA9[loc_776A8AA9] = '\x23';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x22') {
			loc_776A8BA9[loc_776A8AA9] = '\x78';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x57') {
			loc_776A8BA9[loc_776A8AA9] = '\x68';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x86') {
			loc_776A8BA9[loc_776A8AA9] = '\x57';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x56') {
			loc_776A8BA9[loc_776A8AA9] = '\x53';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x80') {
			loc_776A8BA9[loc_776A8AA9] = '\x55';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x49') {
			loc_776A8BA9[loc_776A8AA9] = '\x03';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x70') {
			loc_776A8BA9[loc_776A8AA9] = '\x60';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x76') {
			loc_776A8BA9[loc_776A8AA9] = '\x56';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x34') {
			loc_776A8BA9[loc_776A8AA9] = '\x90';
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[0]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[3];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AD8[3]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[2];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == '\x88') {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[12];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[5]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[9];
		}
		else if(loc_776A8BA9[loc_776A8AA9] == loc_401AC8[4]) {
			loc_776A8BA9[loc_776A8AA9] = loc_401AC8[5];
		}
    }
	for(int loc_786D8ADC = 0; loc_786D8ADC< loc_78556D8ABBBA; loc_786D8ADC++){
		loc_786D8AD6[loc_786D8ADC] = CreateThread(NULL, 0, loc_786D8ADB[loc_786D8ADC], argv[1], 0, &loc_786D8AD5[loc_786D8ADC]);
		WaitForSingleObject(loc_786D8AD6[loc_786D8ADC], INFINITE);
	}




    

	for(int loc_786D8ADC=1; loc_786D8ADC<argc; loc_786D8ADC++) {
		printf("%s ",argv[loc_786D8ADC]);
	}
    loc_72000081();

	for(int loc_786D8ADC = 0; loc_786D8ADC< 7; loc_786D8ADC++){
		CloseHandle(loc_786D8AD6[loc_786D8ADC]);
	}
    loc_72000081();
	
	CloseHandle(loc_786D8AD9);
	CloseHandle(loc_786D8ADA);

  return 0;
}
